@page "/data-demo"

@using MudBlazor
@using System.Text
@using static MudBlazor.CategoryTypes
@inject HttpClient Http

<PageTitle>MudBlazor Table</PageTitle>

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">MudBlazor Product Table</MudText>
@*     <MudTable Items="@products" Hover="true" Bordered="true" Striped="false" @ref="table">
        <HeaderContent>
            <MudTh Class="invisible" Style="width:0px">Id</MudTh>
            <MudTh>Product Name</MudTh>
            <MudTh>Unit Price</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="invisible" Style="width:0px" DataLabel="Id">@context.productID</MudTd>
            <MudTd DataLabel="Name">@context.productName</MudTd>
            <MudTd DataLabel="Description" >@context.unitPrice.ToString("C2")</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                           RowsPerPageString="@rowsPerPageString"
                           InfoFormat="true"
                           AllItemsText="@allItemsText"
                           HorizontalAlignment="HorizontalAlignment.Right"/>
        </PagerContent>
    </MudTable> *@


    <MudDataGrid T="Product" MultiSelection="true" Items="@products" Hideable="true" ReadOnly="false" Hover="true"
                 CommittedItemChanges="@CommittedItemChanges"
                 EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.OnRowClick">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Product Data</MudText>
        </ToolBarContent>
        <Columns>
            @* <SelectColumn T="Product"/> *@
            <PropertyColumn Property="x => x.productID" Hidden="true" />
            <PropertyColumn Property="x => x.productName" Title="Product Name" />
            <PropertyColumn Property="x => x.unitPrice" Format="C" Title="Unit Price" />
            <PropertyColumn Property="x => x.unitsInStock" Title="Units In Stock" />
@*             <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" />
                </CellTemplate>
            </TemplateColumn> *@
@*             <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete"/>
                </CellTemplate>
            </TemplateColumn> *@
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Product" />
        </PagerContent>
    </MudDataGrid>



    @if (loading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    @if (error != null)
    {
        <MudAlert Severity="Severity.Error">@error</MudAlert>
    }
</MudPaper>

@code {
    public class Product
    {
        public int productID { get; set; }
        public string productName { get; set; } = string.Empty;
        public int supplierID { get; set; } = 0;
        public int categoryID { get; set; } = 0;
        public string quantityPerUnit { get; set; } = string.Empty;
        public decimal unitPrice { get; set; } = 0.0m;
        public short unitsOnOrder { get; set; } = 0;
        public short reorderLevel { get; set; } = 0;
        public bool discontinued { get; set; } = false;
        public int unitsInStock { get; set; } = 0;
    }

    async Task CommittedItemChanges(Product item)
    {
        var url = "https://api.baxterpearson.co.uk/api/products/update/";
        var result = await Http.PutAsJsonAsync(url, item);
    }

    void DeleteItem(Product item)
    {
    }

    private MudTable<Product> table = new();

    private List<Product> products = new();
    private bool loading = true;
    private string? error;

    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await Http.GetFromJsonAsync<List<Product>>("https://api.baxterpearson.co.uk/api/products") ?? new();
        }
        catch (Exception ex)
        {
            error = $"Failed to load products: {ex.Message}";
        }
        loading = false;
    }
}
